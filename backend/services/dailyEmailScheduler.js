const cron = require('node-cron');
const emailService = require('./emailService');
const pdfReportGenerator = require('./pdfReportGenerator');
const dailyReportAggregator = require('./dailyReportAggregator');

class DailyEmailScheduler {
Â Â 
Â  constructor() {
Â  Â  this.scheduledJobs = new Map();
Â  Â  this.defaultSchedule = '01 11 * * *'; // 8:00 AM every day
Â  Â  this.isInitialized = false;
Â  }
Â Â 
Â  initialize() {
Â  Â  if (this.isInitialized) {
Â  Â  Â  console.log('Daily email scheduler already initialized');
Â  Â  Â  return;
Â  Â  }
Â  Â Â 
Â  Â  console.log('Initializing daily email scheduler...');
Â  Â Â 
Â  Â  // Schedule daily inventory report email
Â  Â  this.scheduleDailyReport(this.defaultSchedule);
Â  Â Â 
Â  Â  this.isInitialized = true;
Â  Â  console.log('Daily email scheduler initialized successfully');
Â  }
Â Â 
Â  scheduleDailyReport(schedule = this.defaultSchedule) {
Â  Â  console.log(`Scheduling daily inventory report for: ${schedule}`);
Â  Â Â 
Â  Â  // Stop existing job if any
Â  Â  this.stopJob('daily-inventory-report');
Â  Â Â 
Â  Â  const job = cron.schedule(schedule, async () => {
Â  Â  Â  console.log('Running scheduled daily inventory report...');
Â  Â  Â  await this.sendDailyInventoryReport();
Â  Â  }, {
Â  Â  Â  scheduled: true,
Â  Â  Â  timezone: 'Asia/Kolkata' // Set to Indian timezone
Â  Â  });
Â  Â Â 
Â  Â  this.scheduledJobs.set('daily-inventory-report', job);
Â  Â  console.log('Daily inventory report scheduled successfully');
Â  }
Â Â 
  /**
Â  Â * =================================================================
Â  Â * ðŸ”„ START: UPDATED METHOD
Â  Â * This method is updated to use the new HTML generator
Â  Â * and the generic `emailService.sendInventoryReport` sender.
Â  Â * =================================================================
Â  Â */
Â  async sendDailyInventoryReport(targetDate = null, customEmails = null) {
Â  Â  try {
Â  Â  Â  console.log('Generating daily inventory report...');
Â  Â  Â Â 
Â  Â  Â  // Generate daily report
Â  Â  Â  const reportData = await dailyReportAggregator.generateDailyReport(targetDate);
Â  Â  Â Â 
Â  Â  Â  // Generate PDF
Â  Â  Â  const pdfBuffer = await pdfReportGenerator.generateDailyInventoryReport(reportData);
Â  Â  Â Â 
Â  Â  Â  // Get recipient emails (from environment or custom)
Â  Â  Â  const recipientEmails = customEmails || this.getRecipientEmails();
Â  Â  Â Â 
Â  Â  Â  if (!recipientEmails || recipientEmails.length === 0) {
Â  Â  Â  Â  console.log('No recipient emails configured for daily inventory report');
Â  Â  Â  Â  return { success: false, error: 'No recipient emails configured' };
Â  Â  Â  }

Â  Â  Â  // Generate the HTML content and Subject
Â  Â  Â  const subject = `Daily Inventory Report - ${reportData.date}`;
Â  Â  Â  const htmlContent = this.generateDailyEmailContent(reportData);
Â  Â  Â Â 
Â  Â  Â  // Send email to each recipient
Â  Â  Â  const results = [];
Â  Â  Â  for (const email of recipientEmails) {
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  // Use the generic 'sendInventoryReport' (same as weekly)
Â  Â  Â  Â  Â  const sendResult = await emailService.sendInventoryReport(
Â  Â  Â  Â  Â  Â  email.trim(),
Â  Â  Â  Â  Â  Â  subject,
Â  Â  Â  Â  Â  Â  htmlContent,
Â  Â  Â  Â  Â  Â  pdfBuffer
Â  Â  Â  Â  Â  );
Â  Â  Â  Â  Â  results.push({ email: email.trim(), result: sendResult });
Â  Â  Â  Â  } catch (err) {
Â  Â  Â  Â  Â  console.error(`Failed to send to ${email.trim()}:`, err);
Â  Â  Â  Â  Â  results.push({ email: email.trim(), result: { success: false, error: err.message || 'Unknown error' } });
Â  Â  Â  Â  }
Â  Â  Â  }
Â  Â  Â Â 
Â  Â  Â  console.log(`Daily inventory report send attempts: ${results.length}`);
Â  Â  Â  return {
Â  Â  Â  Â  success: results.every(r => r.result && r.result.success),
Â  Â  Â  Â  reportDate: reportData.date,
Â  Â  Â  Â  recipients: results,
Â  Â  Â  Â  summary: {
Â  Â  Â  Â  Â  totalReceipts: reportData.totalReceipts,
Â  Â  Â  Â  Â  totalDispatches: reportData.totalDispatches,
Â  Â  Â  Â  Â  totalReturns: reportData.totalReturns,
Â  Â  Â  Â  Â  netChange: reportData.netChange
Â  Â  Â  Â  }
Â  Â  Â  };
Â  Â  Â Â 
Â  Â  } catch (error) {
Â  Â  Â  console.error('Error sending daily inventory report:', error);
Â  Â  Â  return {
Â  Â  Â  Â  success: false,
Â  Â  Â  Â  error: error.message
Â  Â  Â  };
Â  Â  }
Â  }
  /**
Â  Â * =================================================================
Â  Â * ðŸ”„ END: UPDATED METHOD
Â  Â * =================================================================
Â  Â */
Â Â 
Â  async sendWeeklyInventoryReport(endDate = null, customEmails = null) {
Â  Â  try {
Â  Â  Â  console.log('Generating weekly inventory report...');
Â  Â  Â Â 
Â  Â  Â  // Generate weekly report
Â  Â  Â  const weeklyReport = await dailyReportAggregator.generateWeeklyReport(endDate);
Â  Â  Â Â 
Â  Â  Â  // Generate PDF
Â  Â  Â  const pdfBuffer = await pdfReportGenerator.generateWeeklyInventoryReport(weeklyReport.dailyReports);
Â  Â  Â Â 
Â  Â  Â  // Get recipient emails
Â  Â  Â  const recipientEmails = customEmails || this.getRecipientEmails();
Â  Â  Â Â 
Â  Â  Â  if (!recipientEmails || recipientEmails.length === 0) {
Â  Â  Â  Â  console.log('No recipient emails configured for weekly inventory report');
Â  Â  Â  Â  return { success: false, error: 'No recipient emails configured' };
Â  Â  Â  }
Â  Â  Â Â 
Â  Â  Â  // Send email to each recipient
Â  Â  Â  const results = [];
Â  Â  Â  for (const email of recipientEmails) {
Â  Â  Â  Â  const result = await emailService.sendInventoryReport(
Â  Â  Â  Â  Â  email.trim(),
Â  Â  Â  Â  Â  `Weekly Inventory Report - ${weeklyReport.weekStart} to ${weeklyReport.weekEnd}`,
Â  Â  Â  Â  Â  this.generateWeeklyEmailContent(weeklyReport),
Â  Â  Â  Â  Â  pdfBuffer
Â  Â  Â  Â  );
Â  Â  Â  Â  results.push({ email: email.trim(), result });
Â  Â  Â  }
Â  Â  Â Â 
Â  Â  Â  console.log(`Weekly inventory report sent successfully to ${results.length} recipients`);
Â  Â  Â  return {
Â  Â  Â  Â  success: true,
Â  Â  Â  Â  week: `${weeklyReport.weekStart} to ${weeklyReport.weekEnd}`,
Â  Â  Â  Â  recipients: results,
Â  Â  Â  Â  summary: {
Â  Â  Â  Â  Â  totalReceipts: weeklyReport.totalReceipts,
Â  Â  Â  Â  Â  totalDispatches: weeklyReport.totalDispatches,
Â  Â  Â  Â  Â  totalReturns: weeklyReport.totalReturns
Â  Â  Â  Â  }
Â  Â  Â  };
Â  Â  Â Â 
Â  Â  } catch (error) {
Â  Â  Â  console.error('Error sending weekly inventory report:', error);
Â  Â  Â  return {
Â  Â  Â  Â  success: false,
Â  Â  Â  Â  error: error.message
Â  Â  Â  };
Â  Â  }
Â  }
Â Â 
  /**
Â  Â * =================================================================
Â  Â * ðŸŽ¨ START: NEW DAILY EMAIL TEMPLATE
Â  Â * This is the new, modern template for the daily report.
Â  Â * =================================================================
Â  Â */
Â  generateDailyEmailContent(reportData) {
Â  Â  const brandColor = '#2185d0'; // A modern, friendly blue
Â  Â  const fontFamily = 'Arial, "Helvetica Neue", Helvetica, sans-serif';
Â  Â  const netChangeColor = reportData.netChange > 0 ? '#28a745' : (reportData.netChange < 0 ? '#dc3545' : '#6c757d');
Â  Â  const netChangeSign = reportData.netChange > 0 ? '+' : '';

Â  Â  return `
<body style="margin: 0; padding: 0; background-color: #f4f7f6; font-family: ${fontFamily};">
Â  <table width="100%" border="0" cellpadding="0" cellspacing="0" style="background-color: #f4f7f6;">
Â  Â  <tr>
Â  Â  Â  <td align="center" style="padding: 20px 0;">
Â  Â  Â  Â  Â  Â  Â  Â  <table width="600" border="0" cellpadding="0" cellspacing="0" style="width: 100%; max-width: 600px; background-color: #ffffff; border-radius: 8px; overflow: hidden; border: 1px solid #dee2e6;">
Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <tr>
Â  Â  Â  Â  Â  Â  <td style="background-color: ${brandColor}; padding: 30px; text-align: left;">
Â  Â  Â  Â  Â  Â  Â  <h1 style="margin: 0; font-size: 28px; color: #ffffff; font-family: ${fontFamily};">Daily Inventory Report</h1>
Â  Â  Â  Â  Â  Â  Â  <p style="margin: 5px 0 0 0; font-size: 16px; color: #e0f2ff; font-family: ${fontFamily};">
Â  Â  Â  Â  Â  Â  Â  Â  Date: <strong>${reportData.date}</strong>
Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  </td>
Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <tr>
Â  Â  Â  Â  Â  Â  <td style="padding: 30px;">
Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <table width="100%" border="0" cellpadding="0" cellspacing="0" style="text-align: center;">
Â  Â  Â  Â  Â  Â  Â  Â  <tr>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td style="padding: 15px 10px; border-bottom: 2px solid #28a745;">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h3 style="margin: 0 0 10px 0; font-family: ${fontFamily}; color: #343a40; font-size: 14px; font-weight: 600; text-transform: uppercase; letter-spacing: 0.5px;">ðŸ“¥ Receipts</h3>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p style="font-size: 32px; font-weight: bold; margin: 0; font-family: ${fontFamily}; color: #28a745;">${reportData.totalReceipts}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  Â  <td width="20" style="width: 20px;"></td> Â  Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td style="padding: 15px 10px; border-bottom: 2px solid #ffc107;">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h3 style="margin: 0 0 10px 0; font-family: ${fontFamily}; color: #343a40; font-size: 14px; font-weight: 600; text-transform: uppercase; letter-spacing: 0.5px;">ðŸ“¤ Dispatches</h3>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p style="font-size: 32px; font-weight: bold; margin: 0; font-family: ${fontFamily}; color: #ffc107;">${reportData.totalDispatches}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </td>

Â  Â  Â  Â  Â  Â  Â  Â  Â  <td width="20" style="width: 20px;"></td> Â  Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td style="padding: 15px 10px; border-bottom: 2px solid #dc3545;">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h3 style="margin: 0 0 10px 0; font-family: ${fontFamily}; color: #343a40; font-size: 14px; font-weight: 600; text-transform: uppercase; letter-spacing: 0.5px;">ðŸ”„ Returns</h3>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p style="font-size: 32px; font-weight: bold; margin: 0; font-family: ${fontFamily}; color: #dc3545;">${reportData.totalReturns}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </td>
Â  Â  Â  Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  Â  Â  </table>
Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <table width="100%" border="0" cellpadding="0" cellspacing="0" style="margin-top: 30px; background-color: #e6f7ff; border-radius: 8px; border: 1px solid #b3e0ff;">
Â  Â  Â  Â  Â  Â  Â  Â  <tr>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <td style="padding: 20px; text-align: center;">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h3 style="margin: 0 0 10px 0; font-family: ${fontFamily}; color: #0056b3; font-size: 16px; font-weight: 600;">Net Inventory Change</h3>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p style="font-size: 32px; font-weight: bold; margin: 0; font-family: ${fontFamily}; color: ${netChangeColor};">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ${netChangeSign}${reportData.netChange}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </td>
Â  Â  Â  Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  Â  Â  </table>

Â  Â  Â  Â  Â  Â  Â  <p style="margin: 30px 0 0 0; font-family: ${fontFamily}; font-size: 16px; line-height: 1.6; color: #333333;">
Â  Â  Â  Â  Â  Â  Â  Â  Please find the detailed daily inventory report attached in PDF format.
Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  </td>
Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  _ Â  
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <tr>
Â  Â  Â  Â  Â  Â  <td style="background-color: #f8f9fa; padding: 30px; text-align: center; border-top: 1px solid #dee2e6;">
Â  Â  Â  Â  Â  Â  Â  <p style="margin: 0; font-family: ${fontFamily}; font-size: 12px; color: #6c757d;">
Â  Â  Â  Â  Â  Â  Â  Â  This is an automated report from the <strong>Voomet Inventory Management System</strong>.
Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  <p style="margin: 5px 0 0 0; font-family: ${fontFamily}; font-size: 12px; color: #6c757d;">
Â  Â  Â  Â  Â  Â  Â  Â  Generated on: ${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}
Â  Â  Â  _ Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  </td>
Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  
Â  Â  Â  Â  </table>
Â  Â  Â  Â  Â  Â  Â  </td>
Â  Â  </tr>
Â  </table>
</body>
Â  Â  `;
Â  }
  /**
Â  Â * =================================================================
Â  Â * ðŸŽ¨ END: NEW DAILY EMAIL TEMPLATE
Â  Â * =================================================================
Â  Â */
Â Â 
Â  /**
Â  Â * =================================================================
Â  Â * ðŸŽ¨ WEEKLY EMAIL TEMPLATE (Unchanged)
Â  Â * =================================================================
Â  Â */
Â  generateWeeklyEmailContent(weeklyReport) {
Â  Â  const brandColor = '#2185d0';
Â  Â  const fontFamily = 'Arial, "Helvetica Neue", Helvetica, sans-serif';
Â  Â Â 
Â  Â  return `
<body style="margin: 0; padding: 0; background-color: #f4f7f6; font-family: ${fontFamily};">
Â  <table width="100%" border="0" cellpadding="0" cellspacing="0" style="background-color: #f4f7f6;">
Â  Â  <tr>
Â  Â  Â  <td align="center" style="padding: 20px 0;">
Â  Â  Â  Â  <table width="600" border="0" cellpadding="0" cellspacing="0" style="width: 100%; max-width: 600px; background-color: #ffffff; border-radius: 8px; overflow: hidden; border: 1px solid #dee2e6;">
Â  Â  Â  Â  Â  <tr>
Â  Â  Â  Â  Â  Â  <td style="background-color: ${brandColor}; padding: 30px; text-align: left;">
Â  Â  Â  Â  Â  Â  Â  <h1 style="margin: 0; font-size: 28px; color: #ffffff; font-family: ${fontFamily};">Weekly Inventory Report</h1>
Â  Â  Â  Â  Â  Â  Â  <p style="margin: 5px 0 0 0; font-size: 16px; color: #e0f2ff; font-family: ${fontFamily};">
Â  Â  Â  Â  Â  Â  Â  Â  ${weeklyReport.weekStart} to ${weeklyReport.weekEnd}
Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  </td>
Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  <tr>
Â  Â  Â  Â  Â  Â  <td style="padding: 30px; font-family: ${fontFamily}; font-size: 16px; line-height: 1.6; color: #333333;">
Â  Â  Â  Â  Â  Â  Â  <p style="margin: 0 0 25px 0;">Here is the summary of inventory movements for the past week.</p>
Â  Â  Â  Â  Â  Â  Â  <table width="100%" border="0" cellpadding="0" cellspacing="0" style="text-align: center;">
Â  Â  Â  Â  Â  Â  Â  Â  <tr>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <td style="background-color: #f8f9fa; border-radius: 8px; padding: 20px; border: 1px solid #dee2e6;">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h3 style="margin: 0 0 10px 0; font-family: ${fontFamily}; color: #343a40; font-size: 16px; font-weight: 600;">ðŸ“¥ Total Receipts</h3>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p style="font-size: 28px; font-weight: bold; margin: 0; font-family: ${fontFamily}; color: #28a745;">${weeklyReport.totalReceipts}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <td width="20" style="width: 20px;"></td>
Â  Â  Â  Â  Â  _ Â  Â  Â  <td style="background-color: #f8f9fa; border-radius: 8px; padding: 20px; border: 1px solid #dee2e6;">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h3 style="margin: 0 0 10px 0; font-family: ${fontFamily}; color: #343a40; font-size: 16px; font-weight: 600;">ðŸ“¤ Total Dispatches</h3>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p style="font-size: 28px; font-weight: bold; margin: 0; font-family: ${fontFamily}; color: #ffc107;">${weeklyReport.totalDispatches}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </td>
Â  Â  Â  Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  Â  Â  Â  <tr><td height="20" style="height: 20px;"></td></tr>
Â  Â  Â  Â  Â  Â  Â  Â  <tr>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <td style="background-color: #f8f9fa; border-radius: 8px; padding: 20px; border: 1px solid #dee2e6;">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h3 style="margin: 0 0 10px 0; font-family: ${fontFamily}; color: #343a40; font-size: 16px; font-weight: 600;">ðŸ”„ Total Returns</h3>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p style="font-size: 28px; font-weight: bold; margin: 0; font-family: ${fontFamily}; color: #dc3545;">${weeklyReport.totalReturns}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <td width="20" style="width: 20px;"></td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <td style="background-color: #f8f9fa; border-radius: 8px; padding: 20px; border: 1px solid #dee2e6;">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h3 style="margin: 0 0 10px 0; font-family: ${fontFamily}; color: #343a40; font-size: 16px; font-weight: 600;">ðŸ“Š Avg. Daily Receipts</h3>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p style="font-size: 28px; font-weight: bold; margin: 0; font-family: ${fontFamily}; color: ${brandColor};">${Math.round(weeklyReport.totalReceipts / 7)}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </td>
Â  Â  Â  Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  Â  Â  </table>
Â  Â  Â  Â  Â  Â  Â  <p style="margin: 30px 0 0 0;">A detailed PDF report is attached for your review.</p>
Â  Â  Â  Â  Â  Â  </td>
Â  Â  Â  Â  Â  </tr>
Â  Â  Â  _ Â  Â  <tr>
Â  Â  Â  Â  Â  Â  <td style="background-color: #f8f9fa; padding: 30px; text-align: center; border-top: 1px solid #dee2e6;">
Â  Â  Â  Â  Â  Â  Â  <p style="margin: 0; font-family: ${fontFamily}; font-size: 12px; color: #6c757d;">
Â  Â  Â  Â  Â  _ Â  Â  Â  Â  This is an automated report from the <strong>Voomet Inventory Management System</strong>.
Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  <p style="margin: 5px 0 0 0; font-family: ${fontFamily}; font-size: 12px; color: #6c757d;">
Â  Â  Â  Â  Â  Â  Â  Â  Generated on: ${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}
Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  </td>
Â  Â  Â  Â  s </tr>
Â  Â  Â  Â  </table>
Â  Â  Â  </td>
Â  s </tr>
Â  </table>
</body>
Â  Â  `;
Â  }
Â Â 
Â  getRecipientEmails() {
Â  Â  // Get emails from environment variable or use default
Â  Â  const emailList = process.env.INVENTORY_REPORT_EMAILS || '';
Â  Â Â 
Â  Â  if (!emailList) {
Â  Â  Â  return [];
Â  Â  }
Â  Â Â 
Â  Â  return emailList.split(',').map(email => email.trim()).filter(email => email);
Â  }
Â Â 
Â  stopJob(jobName) {
Â  Â  const job = this.scheduledJobs.get(jobName);
Â  Â  if (job) {
Â  Â  Â  job.stop();
Â  Â  Â  this.scheduledJobs.delete(jobName);
Â  Â  Â  console.log(`Stopped job: ${jobName}`);
s Â  }
Â  }
Â Â 
Â  stopAllJobs() {
Â  Â  this.scheduledJobs.forEach((job, name) => {
Â  Â  Â  job.stop();
Â  Â  Â  console.log(`Stopped job: ${name}`);
Â  Â  });
Â  Â  this.scheduledJobs.clear();
Â  }
Â Â 
Â  getScheduledJobs() {
Â  Â  const jobs = [];
Â  Â  this.scheduledJobs.forEach((job, name) => {
Â  Â  Â  jobs.push({
Â  Â  Â  Â  name,
Â  Â  Â  Â  running: job.running
Â  Â  Â  });
Â  Â  });
Â  Â  return jobs;
Â  }
}

// Create singleton instance
const scheduler = new DailyEmailScheduler();

module.exports = scheduler;